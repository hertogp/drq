#!/usr/bin/env python

# author : git.hertogp@gmail.com
# license: see file LICENSE or <http://unlicense.org>

'''
Dns ReQuest checker - check intersections of ref/add/del-zones

usage: drq {-a db.add | -d db.ref} [options]

 with at least one of:
 -a db.add  zone file with records to add
 -d db.del  zone file with records to delete

 options include:

 -r db.ref  zone file against which additions/removals are checked
 -q         query DNS to check add/del records (even if -r db.ref was given)
 -c <num>   use <num> concurrent dns queries [default is 5]
 -n ns      name server ip to be queried instead of default resolver
 -t         use tcp/53 queries instead of udp/53 queries
 -p         include/create PTR-records for A-records to add/del
 -s         strict checking, require ttl's to match as well
 -D         print debugging info
 -v <num>   verbosity level
 -h         print this message and exit


 -a db.add
    The set of RR-s that should be added to DNS (bind zone file format)

 -d db.del
    The set of RR-s that should be removed from DNS (bind zone file format)

 -r db.ref
    Off-line representation of 'live' DNS records (if not given, -q is implied)

 -q
    Query DNS to see of whether records proposed for addition (-a db.add)
    still need to be added (or not) and/or whether records proposed for deletion
    (-d db.del) still need to be removed (or not). If no -r db.ref is used, this
    option is implied (i.e. dns will be queried). This option can be used in
    addition to specifying a -r db.ref as well, in this case it'll check SOA
    records as well.

 -c <num>
    Maximum number of concurrent sessions to use when sending out DNS queries.
    Defaults to 5.  You might want to lower this if using an ssh tunnel to
    direct tcp-based queries via a stepping stone onto a dns server.

 -n ns
    Donot use the system's default resolver, use the nameserver ns (name or an
    ip address) instead.  Useful if your local system's idea of how to resolve
    names does not suit your purpose.

 -t
    Use tcp/53 to query nameservers instead of udp/53.  Mainly useful for
    proxying DNS queries via a remote jumphost using e.g. proxychains:

        $ ssh -fND 22222 your_acct@jumphost
        $ proxychains drq -r db.ref -a db.add -n <remote_ns_ip> -t

    -> 22222/tcp is the local port where proxychains expects its socks server
    (searches ./proxychains.conf, $HOME/.proxychains/proxychains.conf and
    finally /etc/proxychains.conf for its configuration).

    If you get 'connection refused' your SSH tunnel is probably not up &
    running.  Connection timeout's usually mean the -t was not given which means
    drq is using udp/53 which doesn't get proxied.

 -o file.csv
    Write results to file.csv (in csv format)

 -p
    Automatically add PTR-records for each A-record to be checked.  Sometimes
    local conventions call for such a 1-on-1 relationship.  Using -p you only
    need to provide the A-records.

 -s
    Strict checking requires ttl's to match as well when comparing RR-s. Not
    used normally, but might be just what is needed to check TTL's for RR-s.

 -D
    Print some extra (debugging) info to stderr.

 -v <num>
    Controls the level of informational messages printed to stdout.  Defaults to
    0, which doesn't clutter the reports too much.


 SUMMARY

  Take db.add, db.del & db.ref and determine the intersections.

  If no db.ref is given, it is created by trying to resolve the db.add and
  db.del records, otherwise it uses the db.ref given.  Uses the system's default
  resolver or the one supplied via -n <ns>.  Use -q to grow db.ref even if
  given. Before intersections are calculated, db.ref only records are pruned.

      -a db.ADD <-+---------+=====+---------+-> -d db.DEL
                  |  1      |  2  |      3  |
                  |    +---------------+    |
                  |    | 4  |  5  |  6 |    |
                  +----|----+=====+----|----+
                       |       7       |
                       +---------------+-> -r db.REF (or DNS or both)


     Zx   RAD  Description        Meaning
     --  ----  ------------------ -------------------------------------------
     z1  '.a.' can be added       RR-s can be added as new to REF
     z2  '.ad' possible conflict  RR-s not in REF so add/del is strange
     z3  '..d' cannot delete      RR-s not in REF, so no removal possible
     z4  'ra.' cannot add         RR-s in REF, so no new add possible
     z5  'rad' possible updates   RR-s in ALL zones, so del/add is possible
     z6  'r.d' can be deleted     RR-s can be deleted from REF
     z7  'r..' ref surplus        RR-s weren't pruned for some reason

'''

# Disable some pylint warnings
# pylint: disable=C0321

# import argparse  # have to run in 2.3.4
import getopt
import threading
import dns.zone
import dns.reversename
import dns.exception
import dns.resolver
import dns.rcode
import dns.rdtypes.ANY.PTR
import dns.message
import dns.query
import sys
import datetime
import socket
import exceptions

from multiprocessing.dummy import Pool as ThreadPool
from multiprocessing import Pool

# pylint: disable=too-many-instance-attributes, too-few-public-methods,
# pylint: disable=invalid-name
class Container(object):
    '''ARGS container'''
    def __init__(self):
        'set up default argument values'
        self.r = None  # zref file handle
        self.a = None  # zadd file handle
        self.d = None  # zdel file handle
        self.v = 0     # verbosity level
        self.N = 'Default'
        self.n = dns.resolver.Resolver().nameservers[0] # name server ip
        self._n = dns.resolver.Resolver().nameservers[0]
        self.t = False # use tcp (t=true) else udp (t=false) for dns queries
        self.s = False # strict checking
        self.o = None  # output file for csv formatted results
        self.p = False # check reverse mappings
        self.q = False # query network
        self.c = 5     # max 5 concurrent queries
        self.D = False # print Debug info

#-- Globs
BAR1 = '-'*70 + '\n'
BAR2 = '='*70 + '\n'
ARGS = Container()

def usage():
    '''print usage and exit'''
    print __doc__
    sys.exit(0)

def dbg(*words):
    'print dbg information to stderr'
    if not ARGS.D: return
    print >> sys.stderr, 'dbg:drq:' + ' '.join(str(w) for w in words)
    sys.stderr.flush()

def log(level=0, *words):
    'possibly print log information to stdout'
    if level > ARGS.v: return
    print >> sys.stdout, ' '.join(str(w) for w in words)
    sys.stdout.flush()

def log_soa_rdta(level, name, rdta):
    'log soa record for name(server)'
    if rdta is None:
        log(level, '- `%s`' % name)
        log(level, '    + no soa data available')
    else:
        log(level, '- `%s`' % name)
        log(level,
            '\n    + *primary* `%s`' % rdta.mname,
            '\n    + *contact* `%s`' % str(rdta.rname).replace('.', '@', 1),
            '\n    + *serial* `%s`,' % rdta.serial,
            '\n    + *refresh* `%d(%s)`,' % (rdta.refresh, sec2str(rdta.refresh)),
            '\n    + *retry* `%d(%s)`,' % (rdta.retry, sec2str(rdta.retry)),
            '\n    + *expire* `%d(%s)`,' % (rdta.expire, sec2str(rdta.expire)),
            '\n    + *min* `%d(%s)`' % (rdta.minimum, sec2str(rdta.minimum)))


def log_opts(level, opts):
    'log configuration settings to output'
    log(level, '\n# OPTIONS used by drq\n')
    log(level, '- file with ADD-records,   -a', opts.a or "''")
    log(level, '- file with DEL-records,   -d', opts.d or "''")
    log(level, '- file with REF-records,   -r', opts.r or "''")
    log(level, '- ns for REF-records,      -n', opts.N, opts.n)
    log(level, '- auto-add ptr-records,    -p', opts.p)
    log(level, '- max concurrent requests, -c', opts.c)
    log(level, '- force retrieval for REF, -q', opts.q)
    log(level, '- use 53/tcp for queries,  -t', opts.t)
    log(level, '- use strict checking,     -s', opts.s)
    log(level, '- provide debug output,    -D', opts.D)
    log(level, '- verbosity of output,     -v', opts.v)


def rep_rr(level, zone, prefix='', title=None):
    'report RR-s of zone to console with a prefix'
    if level > ARGS.v: return
    if title is not None: log(level, title)
    if len(zone.nodes) == 0:
        log(level, '`None`')
        return
    for name, ttl, rdta in zone.iterate_rdatas(dns.rdatatype.ANY):
        line = '`%-30s %6d %s %-5s %s`' % (name,
                                        ttl,
                                        dns.rdataclass.to_text(rdta.rdclass),
                                        dns.rdatatype.to_text(rdta.rdtype),
                                        rdta)
        if len(prefix) == 0: log(level, line)
        else: log(level, prefix, line)


def csv_rr(ofh, zone, rad, desc, header=False):
    'write RR intersection results to csv file'
    cleanup = False
    if zone is None: return

    if type(ofh) in [str, unicode]:
        ofh = open(ofh, 'w')
        cleanup = True

    if header is True:
        print >> ofh, ';'.join('name type data RAD description'.split())

    for name, _, rdta in zone.iterate_rdatas(dns.rdatatype.ANY):
        if rdta.rdtype == dns.rdatatype.SOA: continue
        line = ';'.join([str(name),
                         dns.rdatatype.to_text(rdta.rdtype),
                         str(rdta),
                         rad,
                         desc])
        print >> ofh, line

    if cleanup: ofh.close()


def sec2str(seconds):
    'turn seconds into readable string .d(ays).h(rs).m(in).s(ec),'
    rv = []
    seconds = int(seconds)
    days = seconds / 84600
    if days: rv.append('%dd' % days)
    seconds %= 84600
    hrs = seconds / 3600
    if hrs: rv.append('%dh' % hrs)
    seconds %= 3600
    min_ = seconds / 60
    if min_: rv.append('%dm' % min_)
    seconds %= 60
    if seconds: rv.append(',%ds' % seconds)
    return ','.join(rv)

def qry_ns(ns):
    'return (name, ip) for ns if possible, else return (ns, ns)'
    try:
        # try to resolve ns to ip
        ns_name = ns
        ns_rrset = dns.resolver.query(ns_name, rdtype=dns.rdatatype.A)
        ns_ip = ns_rrset.rrset.to_rdataset().items[0].address
        if ns_name != ns_ip:
            return (ns_name, ns_ip)

        ns_ptr = dns.reversename.from_address(ns)
        ns_rrset = dns.resolver.query(ns_ptr, rdtype=dns.rdatatype.PTR)
        ns_name = ns_rrset.rrset.to_rdataset().items[0]
        return (ns_name, ns_ip)

    except dns.resolver.NXDOMAIN:
        log(0, 'drq:FATAL:', 'could not find name/ip for nameserver', ns)
        sys.exit(0)

def do_opts(argv):
    'options and argument processing'
    # we use getopt cause this needs to run in 2.3.4+
    # pylint: disable=too-many-branches
    # pylint: disable=too-many-instance-attributes, too-few-public-methods
    try:
        options, positionals = getopt.gnu_getopt(argv, 'r:ha:d:v:n:so:pqc:tD')
    except getopt.GetoptError, e:
        print 'Error:', str(e)
        sys.exit(2)

    opts = Container()
    opts.N, opts.n = qry_ns(opts.n)
    for opt, arg in options:
        if opt == '-r': opts.r = arg
        elif opt == '-h': usage()
        elif opt == '-a': opts.a = arg
        elif opt == '-d': opts.d = arg
        elif opt == '-v': opts.v = int(arg)
        elif opt == '-n': opts.N, opts.n = qry_ns(arg)
        elif opt == '-s': opts.s = True
        elif opt == '-o': opts.o = arg
        elif opt == '-p': opts.p = True
        elif opt == '-q': opts.q = True
        elif opt == '-c': opts.c = int(arg)
        elif opt == '-t': opts.t = True
        elif opt == '-D': opts.D = True
        else: assert False, 'unhandled option'

    if len(positionals) > 0: assert False, 'No positionals allowed'
    return opts

def num_rrs(zone):
    'return number of RR-s in the zone'
    if zone is None: return 0
    if zone.nodes is None: return 0
    if len(zone.nodes) == 0: return 0
    return sum(len(rds) for node in zone.nodes.values() for rds in node)

def get_soas(*zones):
    'return dict with list of soa rr-s for all (sub)zones known by target NS'
    # zoas[zone] -> [(name, ip, soa-rdta), ..]
    # - soa-rdata may be None is the name server did not respond
    TGT = 'get_soas@%r' % ARGS.n
    rslvr = dns.resolver.Resolver(filename='', configure=False)
    rslvr.nameservers = [ARGS.n]  # use target Nameserver
    zoas = {}

    # loop through all DNS names in the zones & find the zone they're in.
    for name in set().union(*[z.keys() for z in zones if z is not None]):
        # SOA and NS rr-s have zone itself as name.
        if name in zoas or name.parent() in zoas:
            continue
        try:
            zone_name = dns.resolver.zone_for_name(name, resolver=rslvr)
        except dns.resolver.NoRootSOA as e:
            continue
        except dns.resolver.NoNameservers as e:
            continue

        if zone_name is None or zone_name in zoas:
            continue

        # get NS list for each (new) zone_name
        nameservers = []
        soas = []

        dbg(TGT, 'claims zone:', zone_name)
        tgt_nameservers = query_rr((zone_name, dns.rdatatype.NS, ARGS.n))
        if len(tgt_nameservers) < 1:
            dbg(TGT, '- but has no NS-records for it?')

        # query_rr -> [(name, ttl, rdta, err_msg), ..]
        for _, _, rdta, tgt_errmsg in tgt_nameservers:
            if rdta is None or len(tgt_errmsg) > 0: continue
            nameservers.append(rdta.target)
            # Use system resolver to resolve NS names listed by ARGS.n
            name, ttl, ns_dta, err_msg = query_rr((rdta.target,
                                                   dns.rdatatype.A, ARGS._n))[0]
            if ns_dta is None or len(err_msg) > 0:
                # ARGS.n claims SOA, but no useable NS?
                dbg(TGT, "- NS '%s' looks broken (%r)" %
                    (rdta.target, err_msg))
                soas.append((rdta.target, "<broken>", None))
                continue

            ns_ip = ns_dta.address
            ns_soa = query_rr((zone_name, dns.rdatatype.SOA, ns_ip))[0][2]
            soas.append((rdta.target, ns_ip, ns_soa))
            dbg(TGT, "- NS '%s' [%s] soa<%s>" % (rdta.target, ns_ip, ns_soa))

        # add Master to NS-list if not already present
        # Skip the primaries for soas that could  not be queried on their NS's
        primaries = set([nis[2].mname for nis in soas if nis[2] is not None])
        if len(primaries) > 1:
            dbg('Multiple masters! for zone', zone_name, list(primaries))
        for primary in primaries:
            dbg(TGT, "- NS '%s' is primary" % primary)
            if primary in nameservers: continue
            dbg(TGT, "- primary '%s' not in NS-s: %r" % (primary, nameservers))
            # Use system resolver for Addres of primary nameserver
            ns_ip = query_rr((primary, dns.rdatatype.A, ARGS._n))[0][2].address
            ns_soa = query_rr((zone_name, dns.rdatatype.SOA, ns_ip))[0][2]
            soas.append((primary, ns_ip, ns_soa))

        zoas[zone_name] = soas

    return zoas

def query_rr(question):
    'Get RRs [(name, ttl, rdta, errmsg),..] for question=(name,rdtype,at_ip)'
    name, rdtype, at_ip = question
    # sanity check name to resolve
    if name is None or len(name) < 1:
        return [(name, 0, None, 'skipping weird name')]

    # fall back to ARGS.n ns ip address if no target ns was given
    if at_ip is None: at_ip = ARGS._n  # fall back to system's default
    # if at_ip is None: at_ip = ARGS.n
    errmsg = ''
    try:
        qry = dns.message.make_query(name, rdtype)

        if ARGS.t:
            ans = dns.query.tcp(qry, at_ip, timeout=3)
        else:
            ans = dns.query.udp(qry, at_ip, timeout=3)

        retval = [(name, rrset.ttl, rdta, '')
                  for rrset in ans.answer for rdta in rrset]
        retval = [elm for elm in retval if len(elm) > 0] # remove empty results
        if len(retval) == 0:
            retval = [(name, 0, None, 'empty result')]

    except dns.exception.Timeout: errmsg = 'timeout'
    except dns.resolver.NXDOMAIN: errmsg = 'nxdomain'
    except dns.resolver.NoAnswer: errmsg = 'no-answer'
    except dns.resolver.NoNameservers: errmsg = 'no-name-servers'
    except dns.resolver.NoMetaqueries: errmsg = 'no-meta-queries-allowed'
    except socket.error: errmsg = 'socket-error @%s' % at_ip

    # if Exception was caught, return 'no results'-answer w/ clue on error
    if len(errmsg) > 0:
        retval = [(name, 0, None, errmsg)]

    return retval

# Notes query_zone:
# - query_rr returns a list of (name, ttl, rdta, errmsg) for a given name.
# - uses multithreading instead of multiple processes.
# - theads donot free up UDP sockets (probably needs to time out or something),
#   so when querying all records in a zone, it'll hang if the zone is HUGE.
# - In that case use -t for tcp/53. TCP connections get closed & free up the src
#   socket used for the queries.

def query_zone(zsource):
    'query for RR-s and return them as a zone'
    zone = new_zone()
    if zsource is None or len(zsource.nodes)==0: return zone

    questions = [[name, rds.rdtype, ARGS.n]
                 for name, rds in zsource.iterate_rdatasets()]
    dbg('qry_zone:', 'resolving %d DNS queries @ %r' % (len(questions), ARGS.n))
    pool = ThreadPool(5)
    answers = pool.map(query_rr, questions)
    dbg('qry_zone:', 'got %d answers' % len(answers))

    # for name, ttl, rdta, msg in [rr for answer in answers for rr in answer]:
    for answer in answers:
        for name, ttl, rdta, err_msg in answer:
            # dbg('qry_zone: %s => ttl %d, rdta %r (%r)' %
            #     (name.to_text(), ttl, rdta, err_msg or 'ok'))
            if rdta is None or len(err_msg) > 0:
                dbg('qry_zone:skip: %s => ttl %d, rdta %r (%r)' %
                    (name.to_text(), ttl, rdta, err_msg or 'ok'))
                continue
            dbg('qry_zone: add: %s => ttl %d, rdta %r (%r)' %
                (name.to_text(), ttl, rdta, err_msg or 'ok'))
            newrds = zone.get_rdataset(name, rdta.rdtype, create=True)
            newrds.add(rdta)
            newrds.ttl = ttl

    return zone

def trisect_nodes(node1, node2):
    'return (relative complement node1, intersection, relative complement node 2)'
    # Notes:
    # - a dns.rdataset.Rdataset contains 0+ dns.rdata.Rdata elements
    # - ttl lives at the set level, not element level
    # - when strict checking is on (ARGS.s), require ttl's to match
    if node1 is None and node2 is None:
        return dns.node.Node(), dns.node.Node(), dns.node.Node()
    if node2 is None:
        return node1, dns.node.Node(), dns.node.Node()
    if node1 is None:
        return dns.node.Node(), dns.node.Node(), node2

    # node1, node2 are not None, but might still be empty though
    n1x, n12, n2x = dns.node.Node(), dns.node.Node(), dns.node.Node()

    all_types = set([(x.rdclass, x.rdtype) for y in (node1, node2) for x in y])
    for rdclass, rdtype in all_types: # get_rdstypes(node1, node2):
        rds1 = node1.get_rdataset(rdclass, rdtype, create=False)
        rds2 = node2.get_rdataset(rdclass, rdtype, create=False)

        if rds1 is None and rds2 is None:
            continue                         # ignore both empty
        elif rds2 is None:
            n1x.rdatasets.append(rds1)       # unique to node1
        elif rds1 is None:
            n2x.rdatasets.append(rds2)       # unique to node2
        elif ARGS.s and rds1.ttl != rds2.ttl:
            n1x.rdatasets.append(rds1)       # unique ttl for node1
            n2x.rdatasets.append(rds2)       # unique ttl for node2
        else:
            n1x.rdatasets.append(rds1.difference(rds2))   # unique to rds1
            n2x.rdatasets.append(rds2.difference(rds1))   # unique to rds2
            n12.rdatasets.append(rds1.intersection(rds2)) # in both

    return n1x, n12, n2x

def trisect_zones(zone1, zone2):
    'return (relative complement zone1, intersection, relative complement zone2)'
    if zone1 is None and zone2 is None:
        return new_zone(), new_zone(), new_zone()
    if zone1 is None: return new_zone(), new_zone(), zone2
    if zone2 is None: return zone1, new_zone(), new_zone()

    z1x, z12, z2x = new_zone(), new_zone(), new_zone()
    names = set(zone1.nodes.keys() + zone2.nodes.keys())
    for name in names:
        n1x, n12, n2x = trisect_nodes(zone1.get_node(name),
                                      zone2.get_node(name))
        if len(n1x): z1x.nodes[name] = n1x
        if len(n12) > 0: z12.nodes[name] = n12
        if len(n2x) > 0: z2x.nodes[name] = n2x

    return z1x, z12, z2x

def union_zones(*zones):
    'return union of zones'
    uzone = new_zone()
    for name, node in [x for zone in zones for x in zone.items()]:
        unode = uzone.get_node(name, create=True)
        for rds in node:
            urds = unode.get_rdataset(rds.rdclass, rds.rdtype, create=True)
            urds.update(rds)
    return uzone

def new_zone(zfile=None):
    'read zone from file if given, return emtpy zone otherwise'
    if zfile is None: return dns.zone.Zone(dns.name.from_text('.'),
                                           rdclass=dns.rdataclass.IN,
                                           relativize=False)
    # turn name into filehandle, otherwise its already a fhandle
    if type(zfile) == type((str, unicode)): zfile = open(zfile, 'r')

    return dns.zone.from_file(zfile,
                              origin=dns.name.from_text('.'),
                              rdclass=dns.rdataclass.IN,
                              relativize=False,
                              allow_include=True,
                              check_origin=False)

def trim_zone(zone, names):
    'trim a zone down to a particular set of names'
    if zone is None: return new_zone()
    if len(names) == 0: return new_zone()
    for name in zone.nodes.keys():
        if name in names: continue
        for line in zone[name].to_text(name).split('\n'):
            dbg('trim:%s - del RR (%s)' % (name, line))
        zone.delete_node(name)
    return zone

def expand_ptr(zone):
    'for each a-rr, add an ptr-rr to the zone'
    for name, ttl, rdta in [x for x in zone.iterate_rdatas(dns.rdatatype.A)]:
        revname = dns.reversename.from_address(rdta.address)
        rds = zone.find_rdataset(revname, dns.rdatatype.PTR, create=True)
        rds.add(dns.rdtypes.ANY.PTR.PTR(dns.rdataclass.IN,
                                        dns.rdatatype.PTR, name),
                                        ttl)
    return zone  # zone is actually updated 'in-place'


def main():
    'main'
    # NOTEs:
    # o all zones are relative to '.', hence zref,zadd,zdel zones may contain
    #   multiple SOA's (sub)domain-rr's
    # o the script doesn't manage zones, it checks presence/absence of DNS rr's
    # o If zref is read from file, it'll be pruned down to zadd+zdel names
    #   Otherwise, zref will be populated by querying for zadd+zdel names,
    #   either via the system's resolver or against a nameserver given by -n

    # log a timestamp & soa's on all zones/nameservers involved
    log(0, '---\n', 'title: Dns ReQuest check\n',
        'author: at `%s [%s]`\n' % (ARGS.N, ARGS.n),
        'date: %s' % datetime.datetime.now().strftime('%Y-%m-%d, %H:%M:%S'),
        '\n...\n')
    # log(0, '# TIMESTAMP')
    # log(0, 'drq ran at `%s`' %
    #     datetime.datetime.now().strftime('%Y-%m-%d, %H:%M:%S'))

    log_opts(2, ARGS)              # log all settings if requested

    # Create initial add/del/ref zones.
    zadd = new_zone(ARGS.a)        # requested additions from file (if any)
    zdel = new_zone(ARGS.d)        # requested deletions from file (if any)
    zref = new_zone(ARGS.r)        # reference zone from file (if any)
    log(0, '\n# ZONE creation')
    log(0, '\n## From file\n')
    log(0, '- ZADD: `%3d` RR-s from file `%s`' % (num_rrs(zadd), ARGS.a or ''))
    log(0, '- ZDEL: `%3d` RR-s from file `%s`' % (num_rrs(zdel), ARGS.d or ''))
    log(0, '- ZREF: `%3d` RR-s from file `%s`' % (num_rrs(zref), ARGS.r or ''))

    # add ptr-rr's based on a-rr's, if requested
    if ARGS.p:
        log(0, '\n## Auto-adding PTR RR-s\n')
        old_size = num_rrs(zadd)
        zadd = expand_ptr(zadd)
        log(0, '- ZADD now `%3d` RR-s by auto-adding `%2d` PTR RR-s' %
            (num_rrs(zadd), num_rrs(zadd)-old_size))

        old_size = num_rrs(zdel)
        zdel = expand_ptr(zdel)
        log(0, '- ZDEL: now `%3d` RR-s by auto-adding `%2d` PTR RR-s' %
            (num_rrs(zdel), num_rrs(zdel) - old_size))


    old_size = num_rrs(zref)
    zref = trim_zone(zref, set().union(*[z.keys() for z in (zadd, zdel)]))
    log(0, '\n## Pruning superfluous RR-s from ZREF\n')
    log(0, '- ZREF: now `%3d` RR-s by pruning `%d` RR-s not in ZADD or ZDEL'
        % (num_rrs(zref) - old_size, num_rrs(zref)))

    if ARGS.q or not ARGS.r:
        # only if requested (-q) or no ZREF was given via -r db.ref
        log(0, '\n## Expand ZREF with RR-s that are actually live\n')
        # Add live ZADD RR-s to ZREF (if any)
        zref_add = query_zone(zadd)
        zref = union_zones(zref, zref_add)
        log(0, '- ZREF: now `%3d` RR-s by adding `%2d` live ZADD RR-s via %s [%s])' %
            (num_rrs(zref), num_rrs(zref_add), ARGS.N, ARGS.n))
        if num_rrs(zref_add):
            rep_rr(3, zref_add, '    #.', '- ZREF: added `%d` live ZADD RR-s' %
                   num_rrs(zref_add))

        # Add live ZDEL RR-s to ZREF (if any)
        zref_del = query_zone(zdel)
        zref = union_zones(zref, zref_del)
        log(0, '- ZREF: now `%3d` RR-s by adding `%2d` live ZDEL RR-s via %s [%s])' %
            (num_rrs(zref), num_rrs(zref_del), ARGS.N, ARGS.n))
        if num_rrs(zref_del):
            rep_rr(3, zref_del, '    #.', '- ZREF: added `%d` live ZDEL RR-s' %
                   num_rrs(zref_del))

    log(0, '\n## Final results\n')
    log(0, '- ZADD: `%3d` RR-s' % num_rrs(zadd))
    log(0, '- ZDEL: `%3d` RR-s' % num_rrs(zdel))
    log(0, '- ZREF: `%3d` RR-s' % num_rrs(zref))

    # if asked, log zone rr's that will be reasoned with
    log(1, '\n# ZONES as created')
    rep_rr(1, zadd, '#.', '\n## ADD RR-s (from file)\n')
    rep_rr(1, zdel, '#.', '\n## DEL RR-s (from file)\n')
    rep_rr(1, zref, '#.', '\n## REF RR-s (from file/dns)\n')

    # SOA checks at target NS
    zoas = get_soas(zref, zadd, zdel)
    if len(zoas.keys()):
        log(0, '\n# SOA listings')
        for zone, soas in zoas.items():
            log(0, '\n## soas `%s`' % str(zone))
            for ns_name, ns_ip, ns_soa in soas:
                log_soa_rdta(0, '@%s [%s]' % (ns_name, ns_ip), ns_soa)


    z1, z25, z3 = trisect_zones(zadd, zdel)
    z1, z4, _ = trisect_zones(z1, zref)
    z3, z6, _ = trisect_zones(z3, zref)
    z2, z5, _ = trisect_zones(z25, zref)
    z7,  _, _ = trisect_zones(zref, union_zones(z4,z5,z6))

    # log records that are both in ADDs and DELs (ie inconsistent)
    log(0, '\n# INTERSECTION reports')

    log(0, '\nIn summary\n')
    log(0,'```')
    log(0, '''
    -a db.ADD <-+---------+=====+---------+-> -d db.DEL
                |  1      |  2  |      3  |
                |    +---------------+    |
                |    | 4  |  5  |  6 |    |
                +----|----+=====+----|----+
                     |       7       |
                     +---------------+-> -r db.REF (or DNS or both)

    ''')

    c = [-1, num_rrs(z1), num_rrs(z2), num_rrs(z3), num_rrs(z4),
         num_rrs(z5), num_rrs(z6), num_rrs(z7)]
    fmt = '               {0:<5}|{1:^5}|{2:^5}|{3:^5}|{4}'
    log(0, fmt.format(  '', 'REF', 'ADD', 'DEL', '').replace('|',' '))
    log(0, fmt.format('','-----', '-----', '-----', '').replace('|','+'))
    log(0, fmt.format('.a.',    '',  c[1],    '', ' z1 : can be added'))
    log(0, fmt.format('.ad',    '',  c[2],  c[2], ' z2 : add/del conflict'))
    log(0, fmt.format('..d',    '',   '',   c[3], ' z3 : already deleted'))
    log(0, fmt.format('ra.',  c[4],  c[4],    '', ' z4 : already added'))
    log(0, fmt.format('rad',  c[5],  c[5],  c[5], ' z5 : possible updates'))
    log(0, fmt.format('r.d',  c[6],   '',   c[6], ' z6 : can be deleted'))
    log(0, fmt.format('r..',  c[7],   '',     '', ' z7 : ref surplus'))
    log(0, fmt.format('','-----', '-----', '-----', '').replace('|','+'))
    log(0, fmt.format('tot', num_rrs(zref), num_rrs(zadd),
                      num_rrs(zdel),'').replace('|',' '))

    log(0,'```')
    rep_rr(0, z1, '#.',
           '\n## z1, `%d` RR-s in ADD only (to be added)\n' % num_rrs(z1))
    rep_rr(0, z2, '#.',
           '\n## z2, `%d` RR-s in ADD & DEL (conflicts)\n' % num_rrs(z2))
    rep_rr(0, z3, '#.',
           '\n## z3, `%d` RR-s in DEL only (already deleted)\n' % num_rrs(z3))
    rep_rr(0, z4, '#.',
           '\n## z4, `%d` RR-s in REF and ADD (already added)\n' % num_rrs(z4))
    rep_rr(0, z5, '#.',
           '\n## z5, `%d` RR-s in REF,ADD & DEL (updates?)\n' % num_rrs(z5))
    rep_rr(0, z6, '#.',
           '\n## z6, `%d` RR-s in REF & DEL (to be deleted)\n' % num_rrs(z6))
    rep_rr(0, z7, '#.',
           '\n## z7, `%d` RR-s in ZREF only (surplus)\n' % num_rrs(z7))


    # write results to csv file if ARGS.o is not None and writeable
    if not ARGS.o is None:
        ofh = open(ARGS.o, 'w')
        csv_rr(ofh, z1, '.a.', 'can be added', header=True)
        csv_rr(ofh, z2, '.ad', 'possible conflict')
        csv_rr(ofh, z3, '..d', 'cannot delete')
        csv_rr(ofh, z4, 'ra.', 'cannot add')
        csv_rr(ofh, z5, 'rad', 'possible updates')
        csv_rr(ofh, z6, 'r.d', 'can be deleted')
        csv_rr(ofh, z7, 'r..', 'ref surplus')
        ofh.close()

if __name__ == '__main__':
    ARGS = do_opts(sys.argv[1:])
    main()

